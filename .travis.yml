# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1

dist: trusty
language: rust
services: docker
sudo: required

# TODO Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    # TODO Update this to match the name of your project.
    - CRATE_NAME=threescalers

matrix:
  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Linux
    #- env: TARGET=i686-unknown-linux-gnu
    #- env: TARGET=i686-unknown-linux-musl
    - env: TARGET=x86_64-unknown-linux-gnu
    #- env: TARGET=x86_64-unknown-linux-musl

    # OSX
    #- env: TARGET=i686-apple-darwin
    #  os: osx
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx

    # *BSD
    #- env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Other architectures
    #- env: TARGET=aarch64-unknown-linux-gnu
    #- env: TARGET=armv7-unknown-linux-gnueabihf
    #- env: TARGET=mips-unknown-linux-gnu
    #- env: TARGET=mips64-unknown-linux-gnuabi64
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #- env: TARGET=mipsel-unknown-linux-gnu
    #- env: TARGET=powerpc-unknown-linux-gnu
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1

    # Testing other channels
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx
    #  rust: nightly

before_install: set -e

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

before_script:
  - |
      if [["$TRAVIS_RUST_VERSION" == "nightly" ]]; then
        ( ( cargo install clippy && export CLIPPY=true ) || export CLIPPY=false );
      fi

script:
  - bash ci/script.sh
  - |
      if [["$TRAVIS_RUST_VERSION" == "nightly" && $CLIPPY ]]; then
        cargo clippy
      fi

after_script: set +e

after_success:
  - |
      if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" && "$TRAVIS_PULL_REQUEST" == "false" && "$TRAVIS_BRANCH" == "master" ]]; then
        cargo doc && echo "<meta http-equiv=refresh content=0; url=threescalers/index.html>" > target/doc/index.html && git clone https://github.com/davisp/ghp-import.git && ./ghp_import.py -n -p -f -m "Documentation upload" -r https://"$GH_TOKEN"@github.com/"$TRAVIS_REPO_SLUG.git" target/doc && echo "Uploaded documentation"
      fi

# we don't have a deploy phase
#before_deploy:
#  - sh ci/before_deploy.sh

#deploy:
#  # TODO update `api_key.secure`
#  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
#  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
#  # - Paste the output down here
#  api_key:
#    secure: "YOUR_ENCRYPTED TOKEN_HERE"
#  file_glob: true
#  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
#  on:
#    # TODO Here you can pick which targets will generate binary releases
#    # In this example, there are some targets that are tested using the stable
#    # and nightly channels. This condition makes sure there is only one release
#    # for such targets and that's generated using the stable channel
#    condition: $TRAVIS_RUST_VERSION = stable
#    tags: true
#  provider: releases
#  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
