# Based on the "trust" template v0.1.2
# https://github.com/japaric/trust/tree/v0.1.2

dist: trusty
language: rust
services: docker
sudo: required

# TODO Rust builds on stable by default, this can be
# overridden on a case by case basis down below.

env:
  global:
    # TODO Update this to match the name of your project.
    - CRATE_NAME=threescalers

matrix:
  # TODO These are all the build jobs. Adjust as necessary. Comment out what you
  # don't need
  include:
    # Android
    #- env: TARGET=aarch64-linux-android DISABLE_TESTS=1
    #- env: TARGET=arm-linux-androideabi DISABLE_TESTS=1
    #- env: TARGET=armv7-linux-androideabi DISABLE_TESTS=1
    #- env: TARGET=i686-linux-android DISABLE_TESTS=1
    #- env: TARGET=x86_64-linux-android DISABLE_TESTS=1

    # iOS
    #- env: TARGET=aarch64-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=armv7-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=armv7s-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=i386-apple-ios DISABLE_TESTS=1
    #  os: osx
    #- env: TARGET=x86_64-apple-ios DISABLE_TESTS=1
    #  os: osx

    # Linux
    #- env: TARGET=aarch64-unknown-linux-gnu
    #- env: TARGET=arm-unknown-linux-gnueabi
    #- env: TARGET=armv7-unknown-linux-gnueabihf
    #- env: TARGET=i686-unknown-linux-gnu
    #- env: TARGET=i686-unknown-linux-musl
    #- env: TARGET=mips-unknown-linux-gnu
    #- env: TARGET=mips64-unknown-linux-gnuabi64
    #- env: TARGET=mips64el-unknown-linux-gnuabi64
    #- env: TARGET=mipsel-unknown-linux-gnu
    #- env: TARGET=powerpc-unknown-linux-gnu
    #- env: TARGET=powerpc64-unknown-linux-gnu
    #- env: TARGET=powerpc64le-unknown-linux-gnu
    #- env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1
    - env: TARGET=x86_64-unknown-linux-gnu
    #- env: TARGET=x86_64-unknown-linux-musl

    # OSX
    #- env: TARGET=i686-apple-darwin
    #  os: osx
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx

    # *BSD
    #- env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1
    #- env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1

    # Windows
    #- env: TARGET=x86_64-pc-windows-gnu

    # Bare metal
    # These targets don't support std and as such are likely not suitable for
    # most crates.
    # - env: TARGET=thumbv6m-none-eabi
    # - env: TARGET=thumbv7em-none-eabi
    # - env: TARGET=thumbv7em-none-eabihf
    # - env: TARGET=thumbv7m-none-eabi

    # Testing other channels
    - env: TARGET=x86_64-unknown-linux-gnu
      rust: nightly
    #- env: TARGET=x86_64-apple-darwin
    #  os: osx
    #  rust: nightly

before_install:
  - set -e
  - rustup self update
  - sudo apt-get update

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - libiberty-dev

install:
  - sh ci/install.sh
  - source ~/.cargo/env || true

before_script:
  - |
      if [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then
        echo "--== [RUSTUP] Adding clippy & rustfmt ==--";
        if rustup component add clippy; then
          export CLIPPY=true;
        fi
        if rustup component add rustfmt; then
          export RUSTFMT=true;
        fi
      fi

script:
  - |
      /bin/echo -e "--== [INFO] Build Environment ==--\n\n" \
        "TRAVIS_OS_NAME       = ${TRAVIS_OS_NAME}\n" \
        "TRAVIS_RUST_VERSION  = ${TRAVIS_RUST_VERSION}\n" \
        "TRAVIS_REPO_SLUG     = ${TRAVIS_REPO_SLUG}\n" \
        "TRAVIS_PULL_REQUEST  = ${TRAVIS_PULL_REQUEST}\n" \
        "TRAVIS_BRANCH        = ${TRAVIS_BRANCH}\n" \
        "CLIPPY               = ${CLIPPY}\n" \
        "RUSTFMT              = ${RUSTFMT}\n"
  - |
      if [[ "$TRAVIS_RUST_VERSION" == "nightly" && "${RUSTFMT}" == "true" ]]; then
        echo "--== [FMT] cargo fmt check ==--" &&
        cargo fmt --all -- --check
      fi
  - bash ci/script.sh
  - |
      if [[ "$TRAVIS_RUST_VERSION" == "nightly" && "${CLIPPY}" == "true" ]]; then
        echo "--== [CLIPPY] Running ==--" &&
        cargo clippy
      fi

after_script: set +e

# Unfortunately we have to re-run cargo test for the coverage reports to
# work since trust is storing the artifacts in the docker container.
# We might just be able to access those later on to run kcov on them
after_success:
  - |
      if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" && "$TRAVIS_PULL_REQUEST" == "false" && "$TRAVIS_BRANCH" == "master" ]]; then
        echo "--== [DOCS] Generating ==--" &&
        cargo doc && echo '<meta http-equiv=refresh content="0; url=threescalers/index.html">' > target/doc/index.html && git clone https://github.com/davisp/ghp-import.git && ghp-import/ghp_import.py -n -p -f -m "Documentation upload" -r https://"$GH_TOKEN"@github.com/"$TRAVIS_REPO_SLUG.git" target/doc && echo "Uploaded documentation"
      fi
  - |
      if [[ "$TRAVIS_OS_NAME" == "linux" && "$TRAVIS_RUST_VERSION" == "stable" ]]; then
        echo "--== [KCOV] Building ==--" &&
        wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
        tar xzf master.tar.gz &&
        cd kcov-master &&
        mkdir build &&
        cd build &&
        cmake .. &&
        make &&
        sudo make install &&
        cd ../.. &&
        rm -rf kcov-master &&
        cargo test &&
        echo "--== [KCOV] Running ==--" &&
        for file in $(find target/debug -maxdepth 1 -type f -perm /111); do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done &&
        echo "--== [KCOV] Uploading ==--" &&
        bash <(curl -s https://codecov.io/bash) &&
        echo "Uploaded code coverage"
      fi

# we don't have a deploy phase
#before_deploy:
#  - sh ci/before_deploy.sh

#deploy:
#  # TODO update `api_key.secure`
#  # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
#  # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
#  # - Paste the output down here
#  api_key:
#    secure: "YOUR_ENCRYPTED TOKEN_HERE"
#  file_glob: true
#  file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
#  on:
#    # TODO Here you can pick which targets will generate binary releases
#    # In this example, there are some targets that are tested using the stable
#    # and nightly channels. This condition makes sure there is only one release
#    # for such targets and that's generated using the stable channel
#    condition: $TRAVIS_RUST_VERSION = stable
#    tags: true
#  provider: releases
#  skip_cleanup: true

cache: cargo
before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cargo

branches:
  only:
    # This is where pull requests from "bors r+" are built.
    - staging
    # This is where pull requests from "bors try" are built.
    - trying
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    on_success: never
